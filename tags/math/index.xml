<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Math on krzjoa</title><link>/tags/math/</link><description>Recent content in Math on krzjoa</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/math/index.xml" rel="self" type="application/rss+xml"/><item><title>How icy is sun, how fiery is snow? Playing with word embedding vectors</title><author>joachimiak.krzysztof@gmail.com (Krzysztof Joachimiak)</author><link>/2022/05/21/content/post/2022-05-21-how-icy-is-sun/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>/2022/05/21/content/post/2022-05-21-how-icy-is-sun/</guid><description>&lt;h1 id="how-icy-is-sun-how-fiery-is-snow-playing-with-word-embedding-vectors">How icy is sun, how fiery is snow? Playing with word embedding vectors&lt;/h1>
&lt;p>We all know old, good and hackneyed examples, that are typically used to intuitively explain, what the &lt;strong>word embedding&lt;/strong> technique is. We almost always come across a chart presenting a simplified, 2-dimensional vector representation of the words &lt;strong>queen&lt;/strong> and &lt;strong>king&lt;/strong>, which are distant from each other similarly as the words &lt;strong>woman&lt;/strong> and &lt;strong>man&lt;/strong>.&lt;/p>
&lt;p>Today, I&amp;rsquo;d like to go one step further and explore the meaning of the distance between two arbitrary selected vectors. It this particular case - distance between &lt;strong>ice&lt;/strong> and &lt;strong>fire&lt;/strong>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Assume for the moment we have an embedding in the 2-dimensional space. It&amp;rsquo;s not a realistic case, because in most cases such low-dimensional embedding wouldn&amp;rsquo;t fulfill its purpose. So, we have a bunch of vectors or points, described with two coordinates. We choose two such vectors, say &lt;strong>ice&lt;/strong> and &lt;strong>fire&lt;/strong>, as mentioned above.&lt;/p>
&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/plot_1.png" alt="Drawn using https://www.geogebra.org/m/JMMKv7cx">&lt;/p>
&lt;center> &lt;i>Drawn using: &lt;a href = "https://www.geogebra.org/m/JMMKv7cx">Geogebra&lt;/a>&lt;/i>&lt;/center>
&lt;p>Treating the straight line passing trough these points as a new axis, we project the rest of the points onto this line. &lt;strong>The midpoint&lt;/strong> between &amp;ldquo;ice&amp;rdquo; and &amp;ldquo;fire&amp;rdquo; can be treated as the origin (&amp;ldquo;point 0&amp;rdquo;) of the new axis.&lt;/p>
&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/plot_3.png" alt="Drawn using https://www.geogebra.org/m/JMMKv7cx">&lt;/p>
&lt;center> &lt;i>Drawn using: &lt;a href = "https://www.geogebra.org/m/JMMKv7cx">Geogebra&lt;/a>&lt;/i>&lt;/center>
&lt;p>I will call the &lt;strong>ice&lt;/strong> and &lt;strong>fire&lt;/strong> points &lt;strong>poles&lt;/strong>, to express that they show us, what is the expected meaning of being &amp;ldquo;&lt;em>negativemost&lt;/em>&amp;rdquo; and &amp;ldquo;&lt;em>positivemost&lt;/em>&amp;rdquo;.
Briefly - I expect that embedding vectors (poinst) for &amp;ldquo;cold&amp;rdquo; words such as &amp;ldquo;winter&amp;rdquo; will get a negative value on this new axis, while &amp;ldquo;warm&amp;rdquo; words - positive values.
In this context it means that positive-valued points are those ones, that have their projections on the &amp;ldquo;right&amp;rdquo; side of the of the new axis.&lt;/p>
&lt;p>Values obtained for each point are the distances from the projections to the midpoint (with sign).&lt;/p>
&lt;h2 id="math--code-behind">Math &amp;amp; code behind&lt;/h2>
&lt;p>One of the most convenient ways to get &lt;strong>embedding vectors&lt;/strong> for natural language is to use pre-trained models distributed with &lt;a href="https://spacy.io/">&lt;strong>spacy&lt;/strong>&lt;/a> library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy.typing &lt;span style="color:#66d9ef">as&lt;/span> npt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> spacy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> functools &lt;span style="color:#f92672">import&lt;/span> reduce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> operator &lt;span style="color:#f92672">import&lt;/span> add
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Installing en_core_web_mdn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nlp &lt;span style="color:#f92672">=&lt;/span> spacy&lt;span style="color:#f92672">.&lt;/span>load(&lt;span style="color:#e6db74">&amp;#39;en_core_web_md&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>fire &lt;span style="color:#f92672">=&lt;/span> nlp(&lt;span style="color:#e6db74">&amp;#39;fire&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ice &lt;span style="color:#f92672">=&lt;/span> nlp(&lt;span style="color:#e6db74">&amp;#39;ice&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>len(fire&lt;span style="color:#f92672">.&lt;/span>vector)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>300
&lt;/code>&lt;/pre>
&lt;p>A couple of simple function calls, but there is a lot work done behind the scene. We can use &lt;strong>nlp&lt;/strong> object to process whole sentences (or documents) at once. For now, we only need to process single words.&lt;/p>
&lt;h3 id="midpoint---origin-of-the-new-axis">Midpoint - origin of the new axis&lt;/h3>
&lt;p>We will use a &lt;strong>midpoint&lt;/strong> between two initial points as the origin of the our new axis.
It can be calculated with the following formula:&lt;/p>
&lt;center>
$ M = (\frac{x + x_{1}}{2}, \frac{y + y_{1}}{2}, \frac{z + z_{1}}{2}, ...) $
&lt;/center>
&lt;p>Writing that as a function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">midpoint&lt;/span>(x: npt&lt;span style="color:#f92672">.&lt;/span>NDArray, y: npt&lt;span style="color:#f92672">.&lt;/span>NDArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> npt&lt;span style="color:#f92672">.&lt;/span>NDArray:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (len(x) &lt;span style="color:#f92672">!=&lt;/span> len(y)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Vectors come from different spaces! &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;x: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(x)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> dimensions, y: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(y)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> dimensions&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (x &lt;span style="color:#f92672">+&lt;/span> y) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="plotting-function">Plotting function&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">plot&lt;/span>(points, lines, labels):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points_x &lt;span style="color:#f92672">=&lt;/span> [x[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> points]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points_y &lt;span style="color:#f92672">=&lt;/span> [x[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> points]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> l &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>plot([l[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#ae81ff">0&lt;/span>], l[&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#ae81ff">0&lt;/span>]], [l[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>], l[&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> coords, lbl &lt;span style="color:#f92672">in&lt;/span> zip(points, labels):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>text(coords[&lt;span style="color:#ae81ff">0&lt;/span>], coords[&lt;span style="color:#ae81ff">1&lt;/span>], lbl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Points&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>plot(points_x, points_y, &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>grid()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>axhline(linewidth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;black&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>axvline(linewidth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;black&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;equal&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Points lying on the straight line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">18&lt;/span>]) &lt;span style="color:#75715e"># 18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># a = np.array([2, 2])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># b = np.array([-2, -2])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>M &lt;span style="color:#f92672">=&lt;/span> midpoint(A, B)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>points &lt;span style="color:#f92672">=&lt;/span> [A, B, M, C]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lines &lt;span style="color:#f92672">=&lt;/span> [[A, B]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>labels &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;M&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plot(points, lines, labels)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_23_0.png" alt="png">&lt;/p>
&lt;p>As we can see, the line doesn&amp;rsquo;t pass trough the origin. We have to apply &lt;strong>affine transformation&lt;/strong> to shift the whole space, placing &lt;strong>midpoint AB&lt;/strong> at (0, 0). If we do so, we can easily find orthogonal projection of the point C on the line &amp;lsquo;marked&amp;rsquo; by the &lt;strong>B vector&lt;/strong>. After we shift the space, the segment $MB$ becomes a vector as it has its start in the origin.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>transform_matrix &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>eye(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transform_matrix[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>M
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transform_matrix
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>array([[ 1. , 0. , 2.5],
[ 0. , 1. , -10. ],
[ 0. , 0. , 1. ]])
&lt;/code>&lt;/pre>
&lt;p>If you&amp;rsquo;d like to know more details, how to construct the transformation matrix, see for example &lt;a href="https://articulatedrobotics.xyz/5-transformation_matrices/">Affine Transformation Matrices&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># tranformed_a = affine_transform_matrix @ np.vstack(a.T, [1])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">extend_with_one&lt;/span>(vec):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vec &lt;span style="color:#f92672">=&lt;/span> vec[np&lt;span style="color:#f92672">.&lt;/span>newaxis]&lt;span style="color:#f92672">.&lt;/span>T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>vstack([vec, [&lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transposed &lt;span style="color:#f92672">=&lt;/span> [extend_with_one(p) &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> points]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transformed &lt;span style="color:#f92672">=&lt;/span> [transform_matrix &lt;span style="color:#f92672">@&lt;/span> vec &lt;span style="color:#66d9ef">for&lt;/span> vec &lt;span style="color:#f92672">in&lt;/span> transposed]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Removing last dimension with &amp;#39;1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transformed &lt;span style="color:#f92672">=&lt;/span> [vec[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> vec &lt;span style="color:#f92672">in&lt;/span> transformed]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>aff_A, aff_B, aff_M, aff_C &lt;span style="color:#f92672">=&lt;/span> transformed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lines &lt;span style="color:#f92672">=&lt;/span> [[aff_A, aff_B]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>labels &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;shifted_A&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_B&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_M&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_C&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plot(transformed, lines, labels)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_27_0.png" alt="png">&lt;/p>
&lt;h3 id="scalar-projection">Scalar projection&lt;/h3>
&lt;p>We want to compute the &lt;a href="https://en.wikipedia.org/wiki/Scalar_projection">scalar projection&lt;/a> of $\bf{v}$ on $\bf{w}$ using the left-hand side of the following equation:&lt;/p>
&lt;center>
${\hat{\bf{w}}}^{T}\bf{v} = |\bf{v}| cos\theta $
&lt;/center>
&lt;p>When $\theta$ is the angle between $\bf{w}$ and $\bf{v}$, and $\hat{\bf{w}}$ is the &lt;strong>unit vector&lt;/strong>, namely:&lt;/p>
&lt;center>
$\hat{\bf{w}} = \frac{\bf{w}}{|\bf{w}|} $
&lt;/center>
&lt;p>See also:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://mathinsight.org/dot_product">The dot product&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=LyGKycYT2v0&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;amp;index=9&amp;amp;t=216s">Dot products duality by 3Blue1Brown&lt;/a>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>unit_vec &lt;span style="color:#f92672">=&lt;/span> (aff_B) &lt;span style="color:#f92672">/&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>linalg&lt;span style="color:#f92672">.&lt;/span>norm(aff_B)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scalar_projection &lt;span style="color:#f92672">=&lt;/span> unit_vec&lt;span style="color:#f92672">.&lt;/span>T &lt;span style="color:#f92672">@&lt;/span> aff_C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scalar_projection
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>array([[1.25389207]])
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># We compute projection of C to draw a plot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proj_C &lt;span style="color:#f92672">=&lt;/span> unit_vec &lt;span style="color:#f92672">*&lt;/span> scalar_projection
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Plot &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>points &lt;span style="color:#f92672">=&lt;/span> transformed &lt;span style="color:#f92672">+&lt;/span> [proj_C]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lines &lt;span style="color:#f92672">=&lt;/span> [[aff_A, aff_B], [aff_C, proj_C]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>labels &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;shifted_A&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_B&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_mid_A_B&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_C&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;proj_C&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plot(points, lines, labels)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_33_0.png" alt="png">&lt;/p>
&lt;h2 id="axis-class">Axis class&lt;/h2>
&lt;p>Rewriting all as a function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">axis&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, negative_pole: npt&lt;span style="color:#f92672">.&lt;/span>NDArray, positive_pole: npt&lt;span style="color:#f92672">.&lt;/span>NDArray):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>dims &lt;span style="color:#f92672">=&lt;/span> len(negative_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Original values&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>negative_pole &lt;span style="color:#f92672">=&lt;/span> negative_pole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>positive_pole &lt;span style="color:#f92672">=&lt;/span> positive_pole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>midpoint &lt;span style="color:#f92672">=&lt;/span> _midpoint(negative_pole, positive_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Transformation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>transform &lt;span style="color:#f92672">=&lt;/span> _transformation_matrix(self&lt;span style="color:#f92672">.&lt;/span>dims, self&lt;span style="color:#f92672">.&lt;/span>midpoint)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>shifted_negative_pole &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_shift(negative_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>shifted_positive_pole &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_shift(positive_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>unit_vector &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>shifted_positive_pole &lt;span style="color:#f92672">/&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>linalg&lt;span style="color:#f92672">.&lt;/span>norm(self&lt;span style="color:#f92672">.&lt;/span>shifted_positive_pole) &lt;span style="color:#75715e"># shifted_midpoint is (0, 0, ...) &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __call__(self, vector: npt&lt;span style="color:#f92672">.&lt;/span>NDArray):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (len(vector) &lt;span style="color:#f92672">!=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>dims):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Vector length is &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(vector)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, but it should equal &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>dims&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shifted_vector &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_shift(vector)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (self&lt;span style="color:#f92672">.&lt;/span>unit_vector&lt;span style="color:#f92672">.&lt;/span>T &lt;span style="color:#f92672">@&lt;/span> shifted_vector)[&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">plot&lt;/span>(self, &lt;span style="color:#f92672">*&lt;/span>args, title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Embedding vectors&amp;#34;&lt;/span>, figsize &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poles &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;negative&amp;#39;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Negative pole&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;positive&amp;#39;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Positive pole&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>}}):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Init plot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fig, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>figsize, constrained_layout&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>set(title&lt;span style="color:#f92672">=&lt;/span>title)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Horizontal line &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> neg_value &lt;span style="color:#f92672">=&lt;/span> self(self&lt;span style="color:#f92672">.&lt;/span>negative_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_value &lt;span style="color:#f92672">=&lt;/span> self(self&lt;span style="color:#f92672">.&lt;/span>positive_pole)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> all_values &lt;span style="color:#f92672">=&lt;/span> reduce(add, [a[&lt;span style="color:#e6db74">&amp;#39;values&amp;#39;&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> args])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> all_values &lt;span style="color:#f92672">=&lt;/span> all_values &lt;span style="color:#f92672">+&lt;/span> [neg_value, pos_value]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>plot(all_values, np&lt;span style="color:#f92672">.&lt;/span>zeros_like(all_values), &lt;span style="color:#e6db74">&amp;#34;-o&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;k&amp;#34;&lt;/span>, markerfacecolor&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># Baseline and markers on it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Generate colours if not defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> group &lt;span style="color:#f92672">in&lt;/span> args:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values &lt;span style="color:#f92672">=&lt;/span> group[&lt;span style="color:#e6db74">&amp;#39;values&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels &lt;span style="color:#f92672">=&lt;/span> group[&lt;span style="color:#e6db74">&amp;#39;labels&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color &lt;span style="color:#f92672">=&lt;/span> group[&lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> levels &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>tile([&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> int(np&lt;span style="color:#f92672">.&lt;/span>ceil(len(values)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>)))[:len(values)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>vlines(values, &lt;span style="color:#ae81ff">0&lt;/span>, levels, color&lt;span style="color:#f92672">=&lt;/span>color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vert &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#e6db74">&amp;#39;top&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;bottom&amp;#39;&lt;/span>])[(levels &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>astype(int)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> d, l, r, va &lt;span style="color:#f92672">in&lt;/span> zip(values, levels, labels, vert):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>annotate(r, xy&lt;span style="color:#f92672">=&lt;/span>(d, l), xytext&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, np&lt;span style="color:#f92672">.&lt;/span>sign(l)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> textcoords&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;offset points&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>va, ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Show poles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> neg_pole &lt;span style="color:#f92672">=&lt;/span> poles[&lt;span style="color:#e6db74">&amp;#39;negative&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_pole &lt;span style="color:#f92672">=&lt;/span> poles[&lt;span style="color:#e6db74">&amp;#39;positive&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>vlines(neg_value, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, neg_pole[&lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>annotate(neg_pole[&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>], xy&lt;span style="color:#f92672">=&lt;/span>(neg_value, &lt;span style="color:#ae81ff">4&lt;/span>), xytext&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>, np&lt;span style="color:#f92672">.&lt;/span>sign(&lt;span style="color:#ae81ff">4&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> textcoords&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;offset points&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>va, ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>, weight&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bold&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>vlines(pos_value, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>pos_pole[&lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>annotate(pos_pole[&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>], xy&lt;span style="color:#f92672">=&lt;/span>(pos_value, &lt;span style="color:#ae81ff">4&lt;/span>), xytext&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>, np&lt;span style="color:#f92672">.&lt;/span>sign(&lt;span style="color:#ae81ff">4&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> textcoords&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;offset points&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>va, ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>, weight&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bold&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Show the plot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>yaxis&lt;span style="color:#f92672">.&lt;/span>set_visible(&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>spines[[&lt;span style="color:#e6db74">&amp;#34;left&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;top&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>]]&lt;span style="color:#f92672">.&lt;/span>set_visible(&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>margins(y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_shift&lt;/span>(self, vector: npt&lt;span style="color:#f92672">.&lt;/span>NDArray):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extended_vector &lt;span style="color:#f92672">=&lt;/span> _extend_with_one(vector)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (self&lt;span style="color:#f92672">.&lt;/span>transform &lt;span style="color:#f92672">@&lt;/span> extended_vector)[&lt;span style="color:#ae81ff">0&lt;/span>:self&lt;span style="color:#f92672">.&lt;/span>dims]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_extend_with_one&lt;/span>(vector: npt&lt;span style="color:#f92672">.&lt;/span>NDArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> npt&lt;span style="color:#f92672">.&lt;/span>NDArray:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector &lt;span style="color:#f92672">=&lt;/span> vector[np&lt;span style="color:#f92672">.&lt;/span>newaxis]&lt;span style="color:#f92672">.&lt;/span>T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>vstack([vector, [&lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_transformation_matrix&lt;/span>(dims: int, midpoint: npt&lt;span style="color:#f92672">.&lt;/span>NDArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> npt&lt;span style="color:#f92672">.&lt;/span>NDArray:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mat &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>eye(dims &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mat[&lt;span style="color:#ae81ff">0&lt;/span>:dims, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>midpoint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_midpoint&lt;/span>(x: npt&lt;span style="color:#f92672">.&lt;/span>NDArray, y: npt&lt;span style="color:#f92672">.&lt;/span>NDArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> npt&lt;span style="color:#f92672">.&lt;/span>NDArray:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (len(x) &lt;span style="color:#f92672">!=&lt;/span> len(y)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Vectors come from different spaces! &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;x: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(x)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> dimensions, y: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(y)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> dimensions&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (x &lt;span style="color:#f92672">+&lt;/span> y) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Last quick check with a simplified example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Points lying on the straight line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">18&lt;/span>]) &lt;span style="color:#75715e"># 18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>axis_a_b &lt;span style="color:#f92672">=&lt;/span> axis(A, B)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>points &lt;span style="color:#f92672">=&lt;/span> [A, B, C, axis_a_b&lt;span style="color:#f92672">.&lt;/span>midpoint]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shifted_points &lt;span style="color:#f92672">=&lt;/span> [axis_a_b&lt;span style="color:#f92672">.&lt;/span>_shift(p) &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> points]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proj_C &lt;span style="color:#f92672">=&lt;/span> axis_a_b(C) &lt;span style="color:#f92672">*&lt;/span> axis_a_b&lt;span style="color:#f92672">.&lt;/span>unit_vector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shifted_points &lt;span style="color:#f92672">=&lt;/span> shifted_points &lt;span style="color:#f92672">+&lt;/span> [proj_C]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shifted_A, shifted_B, shifted_C, shifted_M, _ &lt;span style="color:#f92672">=&lt;/span> shifted_points
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lines &lt;span style="color:#f92672">=&lt;/span> [[shifted_A, shifted_B], [shifted_C, proj_C]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>labels &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;shifted_A&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_B&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_C&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;shifted_M&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;proj_C&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plot(shifted_points, lines, labels)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_38_0.png" alt="png">&lt;/p>
&lt;h2 id="experiment-with-embeddings">Experiment with embeddings&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ice_fire_axis &lt;span style="color:#f92672">=&lt;/span> axis(ice&lt;span style="color:#f92672">.&lt;/span>vector, fire&lt;span style="color:#f92672">.&lt;/span>vector)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ice&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ice_value &lt;span style="color:#f92672">=&lt;/span> ice_fire_axis(ice&lt;span style="color:#f92672">.&lt;/span>vector)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Fire&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fire_value &lt;span style="color:#f92672">=&lt;/span> ice_fire_axis(fire&lt;span style="color:#f92672">.&lt;/span>vector)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cold &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;polar&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;snow&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;winter&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;fridge&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Antarctica&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;freeze&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warm &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;tropical&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;sun&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;summer&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;oven&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Africa&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;flame&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cold_vecs &lt;span style="color:#f92672">=&lt;/span> [nlp(w)&lt;span style="color:#f92672">.&lt;/span>vector &lt;span style="color:#66d9ef">for&lt;/span> w &lt;span style="color:#f92672">in&lt;/span> cold]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warm_vecs &lt;span style="color:#f92672">=&lt;/span> [nlp(w)&lt;span style="color:#f92672">.&lt;/span>vector &lt;span style="color:#66d9ef">for&lt;/span> w &lt;span style="color:#f92672">in&lt;/span> warm]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>cold_values &lt;span style="color:#f92672">=&lt;/span> [ice_fire_axis(p) &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> cold_vecs]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warm_values &lt;span style="color:#f92672">=&lt;/span> [ice_fire_axis(p) &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> warm_vecs]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warm_values
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[-0.179010129140625,
0.7686063030627324,
0.21483235444847368,
0.5769307333087565,
0.830039105765312,
2.751032938467553]
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>all_values &lt;span style="color:#f92672">=&lt;/span> cold_values &lt;span style="color:#f92672">+&lt;/span> warm_values &lt;span style="color:#f92672">+&lt;/span> [ice_value, fire_value]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_labels &lt;span style="color:#f92672">=&lt;/span> cold &lt;span style="color:#f92672">+&lt;/span> warm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ice_fire_axis&lt;span style="color:#f92672">.&lt;/span>plot(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#39;values&amp;#39;&lt;/span>: cold_values, &lt;span style="color:#e6db74">&amp;#39;labels&amp;#39;&lt;/span>: cold, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;tab:blue&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#39;values&amp;#39;&lt;/span>: warm_values, &lt;span style="color:#e6db74">&amp;#39;labels&amp;#39;&lt;/span>: warm, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;tab:red&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poles &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;negative&amp;#39;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;ice&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;positive&amp;#39;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#39;label&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;ice&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/post/2022-05-21-how-icy-is-sun/word-embedding_files/word-embedding_46_0.png" alt="png">&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>As we can see, in this case the meaning of the distance between &amp;ldquo;ice&amp;rdquo; and &amp;ldquo;fire&amp;rdquo; looks as expected. &amp;ldquo;Cold words&amp;rdquo; are closer to the &lt;em>negative pole&lt;/em> while the &amp;ldquo;warm words* - to the &lt;em>positive pole&lt;/em>.&lt;/p>
&lt;p>To do a similar experiment by yourself, you can use my &lt;a href="https://github.com/krzjoa/salto">salto&lt;/a> package.&lt;/p></description></item></channel></rss>