<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>S4 on krzjoa</title><link>/tags/s4/</link><description>Recent content in S4 on krzjoa</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/s4/index.xml" rel="self" type="application/rss+xml"/><item><title>S4 vs vctrs library - A Double Dispatch Comparision Remake</title><link>/2020/10/01/content/post/2020-10-01-s4_vs_vctrs_remake/2020-10-01-s4_vs_vctrs_remake/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>/2020/10/01/content/post/2020-10-01-s4_vs_vctrs_remake/2020-10-01-s4_vs_vctrs_remake/</guid><description>Remake About two weeks ago, I published on my blog a comparision between two possible implementation of double-dispatch: S4-based and vctrs-based. It turned out, that in my trials vctrs performed better. However, two days later I’ve got a message from Lionel Henry via comment to my commit on GitHub. He suggested, that S4 got faster in the newest versions of R.
I decided to remake this experiment and check out, if my findings are still true.</description></item><item><title>Double dispatch in R: S4 vs vctrs</title><link>/2020/09/21/content/post/2020-09-21-s4-vs-vctrs/2020-09-21-s4-vs-vctrs/</link><pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate><guid>/2020/09/21/content/post/2020-09-21-s4-vs-vctrs/2020-09-21-s4-vs-vctrs/</guid><description>Why do we may need double dispatch? In most cases, when writing R scripts or even creating R packages, it is enough to use standard functions or S3 methods. However, there is one important field that forces us to consider double dispatch question: arithmetic operators.
Suppose we’d like to create a class, which fits the problem we’re currently working on. Let’s name such class beer.
beer &amp;lt;- function(type){ structure(list(type = type),class = &amp;#34;beer&amp;#34;) } opener &amp;lt;- function(){ structure(list(), class = &amp;#34;opener&amp;#34;) } pilsner &amp;lt;- beer(&amp;#34;pilnser&amp;#34;) my_opener &amp;lt;- opener() Then, we create an operator which defines some non-standard behaviour.</description></item></channel></rss>